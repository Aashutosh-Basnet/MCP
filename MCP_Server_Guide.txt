========================================
MASTER CONTROL PROGRAM (MCP) SERVER GUIDE
========================================

This guide provides a comprehensive overview of creating and using the MCP server, including step-by-step instructions, code samples, and implementation details.

1. STEP BY STEP GUIDE ON CREATING MCP SERVER
===========================================

A. Initial Setup
---------------
1. Create project directory:
   ```
   mkdir mcp-server
   cd mcp-server
   npm init -y
   ```

2. Install required dependencies:
   ```
   npm install express body-parser dotenv openai express-rate-limit simple-git
   ```

3. Create environment configuration:
   - Create .env file in root directory
   - Add OpenAI API key:
     ```
     OPENAI_API_KEY=your_api_key_here
     ```

B. Project Structure
------------------
Create the following structure:
```
mcp-server/
├── .env
├── package.json
├── server.js
└── tools/
    ├── writefile.js
    └── gitpush.js
```

C. Security Implementation
------------------------
1. Rate limiting configuration
2. Input validation
3. Error handling
4. Environment variable protection

D. API Endpoints
--------------
1. Health Check: GET /health
2. Run Commands: POST /run

2. CODE SAMPLES OF SIMPLE MCP SERVER
==================================

A. Main Server File (server.js)
-----------------------------
```javascript
require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const rateLimit = require('express-rate-limit');
const OpenAI = require("openai");

const app = express();

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100
});

app.use(limiter);
app.use(bodyParser.json());

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

app.post("/run", async (req, res) => {
  const userPrompt = req.body.prompt;
  
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "system", content: "Your instructions here" },
        { role: "user", content: userPrompt },
      ],
    });
    
    res.json({ success: true, result: response.choices[0].message.content });
  } catch (err) {
    res.status(500).json({ 
      error: "Failed to process request",
      message: err.message
    });
  }
});

app.listen(3000, () => {
  console.log("MCP server running at http://localhost:3000");
});
```

B. Package Configuration (package.json)
------------------------------------
```json
{
  "name": "mcp-server",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "body-parser": "^2.2.0",
    "dotenv": "^16.5.0",
    "express": "^5.1.0",
    "express-rate-limit": "^7.1.5",
    "openai": "^4.102.0",
    "simple-git": "^3.27.0"
  }
}
```

3. CALL TO ACTION (CTA)
======================

To get started with your MCP server:

1. Clone or create the project structure as shown above

2. Install Dependencies:
   ```
   npm install
   ```

3. Configure Environment:
   - Create .env file
   - Add your OpenAI API key
   - Verify all required dependencies are installed

4. Start the Server:
   ```
   npm start
   ```

5. Test the Endpoints:
   a. Health Check:
      ```
      curl http://localhost:3000/health
      ```
   
   b. Run Command:
      ```
      curl -X POST http://localhost:3000/run \
        -H "Content-Type: application/json" \
        -d '{"prompt": "your prompt here"}'
      ```

Next Steps:
----------
1. Implement additional security measures
2. Add authentication
3. Set up monitoring and logging
4. Create automated tests
5. Add more tool integrations

For support or contributions:
- Review the code documentation
- Check for updates regularly
- Implement proper error handling
- Monitor server performance

Remember to:
- Keep your API keys secure
- Regularly update dependencies
- Monitor rate limits
- Back up your configurations

========================================
End of Guide
======================================== 